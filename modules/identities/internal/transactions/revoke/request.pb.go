// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/identities/transactions/revoke/request.proto

package revoke

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	protoTypes "github.com/persistenceOne/persistenceSDK/schema/proto/types"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type transactionRequest struct {
	BaseReq          protoTypes.BaseReq `protobuf:"bytes,1,opt,name=base_req,json=baseReq,proto3" json:"base_req"`
	FromID           string             `protobuf:"bytes,2,opt,name=from_iD,json=fromID,proto3" json:"from_iD,omitempty"  valid:"required~required field fromID missing, matches(^[A-Za-z0-9-_=.|]+$)~invalid field fromID"`
	ToID             string             `protobuf:"bytes,3,opt,name=toID,proto3" json:"toID,omitempty"  valid:"required~required field toID missing, matches(^[A-Za-z0-9-_=.|]+$)~invalid field toID"`
	ClassificationID string             `protobuf:"bytes,4,opt,name=classificationID,proto3" json:"classificationID,omitempty"  valid:"required~required field classificationID missing, matches(^[A-Za-z0-9-_=.]+$)~invalid field classificationID"`
}

func (m transactionRequest) Reset()         { m = transactionRequest{} }
func (m transactionRequest) String() string { return proto.CompactTextString(&m) }
func (transactionRequest) ProtoMessage()    {}
func (*transactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aaee7b63a2a3d52, []int{0}
}
func (m *transactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *transactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *transactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionRequest.Merge(m, src)
}
func (m *transactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *transactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionRequest proto.InternalMessageInfo


func (m *transactionRequest) GetFromID() string {
	if m != nil {
		return m.FromID
	}
	return ""
}

func (m *transactionRequest) GetToID() string {
	if m != nil {
		return m.ToID
	}
	return ""
}

func (m *transactionRequest) GetClassificationID() string {
	if m != nil {
		return m.ClassificationID
	}
	return ""
}

func init() {
	proto.RegisterType((*transactionRequest)(nil), "base.transactionRequest")
}

func init() {
	proto.RegisterFile("proto/identities/transactions/revoke/request.proto", fileDescriptor_3aaee7b63a2a3d52)
}

var fileDescriptor_3aaee7b63a2a3d52 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x33, 0x1a, 0x5a, 0x8d, 0x1b, 0x19, 0x17, 0x86, 0x2a, 0x69, 0x71, 0xa1, 0x45, 0x31,
	0x43, 0xeb, 0x4e, 0x70, 0x53, 0xb2, 0xc9, 0x36, 0xb8, 0x72, 0x13, 0x26, 0xe9, 0x6b, 0x1d, 0x6c,
	0x33, 0xcd, 0xbc, 0x69, 0xc1, 0x5b, 0x78, 0x04, 0x0f, 0xe1, 0x21, 0xea, 0xae, 0xb8, 0x72, 0x25,
	0xd2, 0x6e, 0x3c, 0x86, 0x64, 0x12, 0x30, 0x50, 0x77, 0xef, 0xff, 0xe7, 0xe3, 0xbd, 0x9f, 0xf9,
	0x9d, 0xfe, 0x4c, 0x49, 0x2d, 0x99, 0x18, 0x42, 0xa6, 0x85, 0x16, 0x80, 0x4c, 0x2b, 0x9e, 0x21,
	0x4f, 0xb5, 0x90, 0x19, 0x32, 0x05, 0x0b, 0xf9, 0x04, 0x4c, 0x41, 0x3e, 0x07, 0xd4, 0xbe, 0x81,
	0xa9, 0x9d, 0x70, 0x84, 0xd6, 0xb9, 0x7e, 0x14, 0x6a, 0x18, 0xcf, 0xb8, 0xd2, 0xcf, 0xac, 0xdc,
	0x32, 0x96, 0x63, 0xf9, 0x37, 0x95, 0x74, 0xeb, 0x6a, 0x9b, 0x4b, 0x25, 0x4e, 0x25, 0xc6, 0x75,
	0x51, 0xc1, 0x17, 0x75, 0x8f, 0x15, 0x77, 0xd8, 0xa2, 0x97, 0x80, 0xe6, 0x3d, 0x23, 0x14, 0xe4,
	0x25, 0x78, 0xf6, 0x4e, 0x1c, 0x5a, 0x4b, 0x1a, 0x95, 0x01, 0xe9, 0x9d, 0xb3, 0x57, 0x70, 0xb1,
	0x82, 0xdc, 0x25, 0x1d, 0xd2, 0x3d, 0xe8, 0x9f, 0xfa, 0xd5, 0x81, 0xc2, 0xf7, 0xab, 0x65, 0xfe,
	0x80, 0x23, 0x44, 0x90, 0x0f, 0xec, 0xe5, 0x57, 0xdb, 0x8a, 0x9a, 0x49, 0x29, 0xe9, 0xb1, 0xd3,
	0x1c, 0x29, 0x39, 0x8d, 0x45, 0xe0, 0xee, 0x74, 0x48, 0x77, 0x3f, 0x6a, 0x14, 0x32, 0x0c, 0x28,
	0x75, 0x6c, 0x2d, 0xc3, 0xc0, 0xdd, 0x35, 0xae, 0x99, 0xe9, 0xa5, 0x73, 0x98, 0x4e, 0x38, 0xa2,
	0x18, 0x89, 0x94, 0x17, 0x21, 0xc2, 0xc0, 0xb5, 0xcd, 0xfb, 0x96, 0x7f, 0x7b, 0xf2, 0xf3, 0xda,
	0xb6, 0x3e, 0xde, 0xae, 0x8f, 0xee, 0xeb, 0x99, 0x71, 0x26, 0x33, 0x84, 0x41, 0xb8, 0x5c, 0x7b,
	0x64, 0xb5, 0xf6, 0xc8, 0xf7, 0xda, 0x23, 0x2f, 0x1b, 0xcf, 0x5a, 0x6d, 0x3c, 0xeb, 0x73, 0xe3,
	0x59, 0x0f, 0x6c, 0x2a, 0x87, 0xf3, 0x09, 0x60, 0xbd, 0x1f, 0x91, 0x69, 0x50, 0x19, 0x9f, 0xfc,
	0x57, 0x54, 0xd2, 0x30, 0xbf, 0x73, 0xf3, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x35, 0x27, 0x8c, 0x9e,
	0xd7, 0x01, 0x00, 0x00,
}

func (m *transactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *transactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *transactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassificationID) > 0 {
		i -= len(m.ClassificationID)
		copy(dAtA[i:], m.ClassificationID)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ClassificationID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ToID) > 0 {
		i -= len(m.ToID)
		copy(dAtA[i:], m.ToID)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ToID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromID) > 0 {
		i -= len(m.FromID)
		copy(dAtA[i:], m.FromID)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.FromID)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.BaseReq.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRequest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *transactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseReq.Size()
	n += 1 + l + sovRequest(uint64(l))
	l = len(m.FromID)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.ToID)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.ClassificationID)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func sovRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *transactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: transactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: transactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassificationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassificationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequest = fmt.Errorf("proto: unexpected end of group")
)
